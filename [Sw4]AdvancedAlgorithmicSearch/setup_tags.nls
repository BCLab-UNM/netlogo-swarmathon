;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Each patch with the color black counts as one food item. We will distribute the food with a
;; power law distribution. In short, we will make one very large pile then we will make larger
;; numbers of smaller piles until eventually placing a super large amount of single food items. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to setup-tags

  ;; Make sure we don't place food on top of each other due to random patch selection.
  let food-placed 0

  ;; Our power law distribution will place 256 food items (or black patches), and we
  ;; will keep trying to place food until exactly 256 are placed without overlap.
  while[ food-placed != 256 ]
  [
    ;; The parameters for a rank 4 power law distribution are defined below.

    ;; The number of clusters for each rank:
    ;;      * rank 1 ->  1 cluster
    ;;      * rank 2 ->  4 clusters
    ;;      * rank 3 -> 16 clusters
    ;;      * rank 4 -> 64 clusters
    let power-law-clusters   [ 01 04 16 64 ]
    
    ;; The size of clusters (in patches) for each rank:
    ;;      * rank 1 -> 8 x 8 clusters (64 patches)
    ;;      * rank 2 -> 4 x 4 clusters (16 patches)
    ;;      * rank 3 -> 2 x 2 clusters ( 4 patches)
    ;;      * rank 4 -> 1 x 1 clusters ( 1 patch  )
    let power-law-dimensions [ 08 04 02 01 ]

    ;; Book keeping variables.
    let rank  4
    let index 0
    
    ;; By default, all patches are white.
    ask patches [ set pcolor white ]

    ;; Place food for each rank of the power law distribution.
    repeat (rank)
    [
      ;; Pull a value from the power-law-clusters list and place it in a temporary variable.
      let number-of-clusters (item index power-law-clusters)

      ;; Create a set number of clusters.
      repeat (number-of-clusters)
      [
        ;; Pick a random coordinate in the arena's XY plane.
        let x-value random-pxcor
        let y-value random-pycor

        ;; Pull a value from the power-law-dimensions list and place it in a temporary variable.
        let size-of-cluster (item index power-law-dimensions)
        
        ;; Make sure the cluster we are about to create won't try to go out of bounds!
        if(x-value > (max-pxcor - size-of-cluster)) [ set x-value (max-pxcor - size-of-cluster) ]
        if(x-value < (min-pxcor + size-of-cluster)) [ set x-value (min-pxcor + size-of-cluster) ]
        if(y-value > (max-pycor - size-of-cluster)) [ set y-value (max-pycor - size-of-cluster) ]
        if(y-value < (min-pycor + size-of-cluster)) [ set y-value (min-pycor + size-of-cluster) ]

        ;; We are creating a square cluster so the cluster's height and length are equal.

        ;; The height of the cluster, AKA rows.
        repeat (size-of-cluster)
        [
          ;; The length of the cluster, AKA columns.
          repeat (size-of-cluster)
          [
            ;; Place a food item.
            ask patch (x-value) (y-value) [ set pcolor blue ]

            ;; Move right to the next column.
            set x-value (x-value + 1)
          ]

          ;; Move left to the start of the first column.          
          set x-value (x-value - size-of-cluster)

          ;; Move down to the start of the next row.
          set y-value (y-value - 1)
        ]
      ]

      ;; Increment the index. The index is equal to the ((current power law rank) - 1).
      set index (index + 1)
    ]

    ;; Draw the anthill.
    ask patches with [ pcolor != blue ]
    [
      set pcolor base-pcolor
    ]
    ask patches
    [
      let nest-radius      (max-pxcor   * 0.075)
      ; let nest-door-radius (nest-radius * 0.350)
        
      ;; Draw the anthill with a radius of "nest-radius" from the origin.
      if(distancexy 0 0 < nest-radius) [ set pcolor green ]
        
      ;; Draw the entrance to the anthill with a radius of "nest-door-radius" from the origin.
      ; if(distancexy 0 0 < nest-door-radius) [ set pcolor gray - 2.0 ]
    ]
    
    ;; Update the amount of food correctly placed. (I.E. not placed on the anthill.)
    set food-placed count patches with [ pcolor = blue ]
  ]
  
  ;; Reset the global variables related to food collection.
  ; set food-collected 0
  ; set food-remaining food-placed

end